/*
 *  Ares, a multi-player augmented reality first person shooter
 *  Copyright (C) 2010  Jmaxxz, Mike McBride, and Kevin Curtis
 * 
 * This file is under the the following License
 *          DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *                   Version 2, December 2004
 *       Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>
 *
 *       Everyone is permitted to copy and distribute verbatim or modified
 *       copies of this license document, and changing it is allowed as long
 *       as the name is changed.
 *
 *                  DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *         TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *          0. You just DO WHAT THE FUCK YOU WANT TO.
 * 
 * Change log
 * 
 * Version | Author | Reason for change                | Description of change
 * -------- -------- ---------------------------------- ------------------------------------------------------
 * 1.0      jmaxxz initial development                Intial creation
 */

using System;
using System.Drawing;
using System.Threading;
using System.Windows.Forms;
using Ares.Server.Console;
using Ares.Server.Utils;
using Message = Ares.Server.Console.Message;

namespace Ares.Server
{
    /// <summary>
    /// Provides a user interface which allows visual observation of event generated by
    /// an instance of <see cref="Server.Console.Console"/>.
    /// </summary>
    public partial class ConsoleInterface : UserControl
    {
        private Console.Console _backingConsole;
        /// <summary>
        /// Gets and sets the backing <see cref="Server.Console.Console"/> object
        /// to be used by this user control.
        /// </summary>
        public Console.Console BackingConsole
        {
            get
            {
                return _backingConsole;
            }
            set
            {
                if(_backingConsole != null)
                {
                    _backingConsole.ItemLogged -= UpdateConsole;
                }

                _backingConsole = value;

                if (_backingConsole != null)
                {
                    _backingConsole.ItemLogged += UpdateConsole;
                }
            }
        }


        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ConsoleInterface()
        {
            InitializeComponent();
            PrintToConsole(new Message("Message", ErrorLevel.Message));
            PrintToConsole(new Message("Warning", ErrorLevel.Warning));
            PrintToConsole(new Message("Error", ErrorLevel.Error));
        }

        private void UpdateConsole(object sender, Message e)
        {
            if (InvokeRequired)
            {
                // Execute the same method, but this time on the GUI thread
                BeginInvoke(new ThreadStart(() => PrintToConsole(e)));
                return;
            }

            PrintToConsole(e);
        }

        /// <summary>
        /// Prints a <see cref="Message"/> to the console.
        /// </summary>
        /// <param name="message">The message to be printed to the console</param>
        private void PrintToConsole(Message message)
        {
            Color textColor;

            //Set the color of the message before printing it to the console
            switch (message.Level)
            {
                case ErrorLevel.Error:
                    textColor = Color.Firebrick;
                    break;
                case ErrorLevel.Warning:
                    textColor = Color.DarkOrchid;
                    break;
                default:
                    textColor = Color.Black;
                    break;
            }


            txtBoxConsole.AppendColoredText(message.MessageText + Environment.NewLine, textColor);
        }
    }
}
